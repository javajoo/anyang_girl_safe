<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="Event">
	
	<typeAlias  alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias  alias="EventSearchVO" type="com.danusys.platform.west.service.EventVO"/>
	
	<select id="eventDAO.selectEventList" parameterClass="EventSearchVO" resultClass="egovMap">
		<![CDATA[
			SELECT * FROM (
				SELECT * FROM (
					SELECT   ROWNUM rnum, e.seq_no
						   , e.event_no
				 		   , ('images/icons/' || e.event_type || '_L.png') AS icon_name
				 		   , (SELECT code_nm FROM platform_code WHERE code_group = 'EVENT_TYPE' AND code_cd = e.event_type) AS event_type
				 		   , TO_CHAR(e.event_de, 'yyyy-mm-dd hh24:mi:ss') AS event_de
				 		   , TO_CHAR(e.end_de, 'yyyy-mm-dd hh24:mi:ss') AS end_de
				 		   , e.event_rating
				 		   , e.event_place
				 		   , e.event_cont
				 		   , e.state
				 		   , (SELECT code_nm FROM platform_code WHERE code_group = 'EVENT_STATE' AND code_cd = e.state 
				 		      AND sys_cd = (SELECT sys_cd FROM platform_code where code_cd = e.event_type)) state_nm
				 		   , e.encrypt_latitude
				 		   , e.encrypt_longitude
				 		   , NVL(CRYPTO_AES128.AES_DECRYPT(REPLACE(e.encrypt_latitude, ' ', ''), #key#), 0) AS latitude
				 		   , NVL(CRYPTO_AES128.AES_DECRYPT(REPLACE(e.encrypt_longitude, ' ', ''), #key#), 0) AS longitude
				 		   , '0' altitude
				 		   , e.accept_type
				 		   , e.accept_id
				 		   , e.accept_cont
				 		   , e.info_nm
				 		   , e.zone
				 		   , e.facility_id
				 		   , e.inst_id
				 		   , e.inst_de
				 		   , e.upd_id
				 		   , e.upd_de
						FROM (SELECT * FROM event ORDER BY upd_de DESC) e
						WHERE e.seq_no = (SELECT max(a.seq_no) FROM event a WHERE a.event_no = e.event_no)
			]]>
			<isNotEmpty property = "eventNo">
						AND	e.event_no = #eventNo#
			</isNotEmpty>
			<isNotEqual property="state" compareValue="0"> 
				<isEqual property= "state" compareValue = "EVENT_STATE_2">
						AND e.state IN ('EVENT_STATE_2', 'EVENT_STATE_3')
				</isEqual>
				<isNotEqual property= "state" compareValue = "EVENT_STATE_2">
						AND e.state = #state#
				</isNotEqual>
			</isNotEqual>
			<isNotEmpty property = "eventType">
						AND	e.event_type = #eventType#
			</isNotEmpty>
			<isNotEmpty property = "comboState">
				<isEqual property= "comboState" compareValue = "EVENT_STATE_2">
						AND e.state IN ('EVENT_STATE_2', 'EVENT_STATE_3')
				</isEqual>
				<isNotEqual property= "comboState" compareValue = "EVENT_STATE_2">
						AND e.state = #comboState#
				</isNotEqual>
			</isNotEmpty>
			<isNotEmpty property = "eventDeS">
						AND TO_CHAR(e.event_de, 'yyyy-mm-dd') >= TO_CHAR(#eventDeS#)
			</isNotEmpty>
			<isNotEmpty property = "eventDeE">
						AND TO_CHAR(#eventDeE#) >= TO_CHAR(e.event_de, 'yyyy-mm-dd')
			</isNotEmpty>
			<isNotEmpty property = "totSearch">
			<![CDATA[
						AND (NVL((SELECT code_nm FROM platform_code WHERE code_group = 'EVENT_TYPE' AND code_cd = e.event_type),'') || NVL(e.event_cont,'')
						|| NVL((SELECT code_nm FROM platform_code WHERE code_group = 'EVENT_STATE' AND code_cd = e.state 
				 		AND sys_cd = (SELECT sys_cd FROM platform_code where code_cd = e.event_type)),'') || NVL(e.facility_id,'')
							LIKE ('%' || #totSearch# || '%'))
			]]>
			</isNotEmpty>
						ORDER BY e.upd_de DESC) INNER
      			WHERE 1=1
      		<isNotEqual property="recordCountPerPage" compareValue="-1">
      		<![CDATA[
      			AND rnum <= #lastIndex#
      		]]>
      		</isNotEqual>
      		)
      		WHERE 1=1
      		<isNotEqual property="recordCountPerPage" compareValue="-1">
      		<![CDATA[
      		AND rnum > #firstIndex#
      		]]>
      		</isNotEqual>
	</select>	
	<select id="eventDAO.selectEventListTotCnt" parameterClass="EventSearchVO" resultClass="int">
			SELECT COUNT(*) totcnt
			FROM event e
			WHERE e.seq_no = (SELECT max(a.seq_no) FROM event a WHERE a.event_no = e.event_no)
			<isNotEmpty property = "eventNo">
			AND	e.event_no = #eventNo#
			</isNotEmpty>
			<isNotEqual property="state" compareValue="0"> 
			AND e.state = #state#
			</isNotEqual>
			<isNotEmpty property = "eventType">
			AND	e.event_type = #eventType#
			</isNotEmpty>
			<isNotEmpty property = "comboState">
			AND	e.state = #comboState#
			</isNotEmpty>
			<isNotEmpty property = "eventDeS">
			AND TO_CHAR(e.event_de, 'yyyy-mm-dd') >= TO_CHAR(#eventDeS#)
			</isNotEmpty>
			<isNotEmpty property = "eventDeE">
			AND TO_CHAR(#eventDeE#) >= TO_CHAR(e.event_de, 'yyyy-mm-dd')
			</isNotEmpty>
			<isNotEmpty property = "totSearch">
			AND ((NVL((SELECT code_nm FROM platform_code WHERE code_group = 'EVENT_TYPE' AND code_cd = e.event_type ),'') || NVL(e.event_cont,'')
			|| NVL((SELECT code_nm FROM platform_code WHERE code_group = 'EVENT_STATE' AND code_cd = e.state 
			AND sys_cd = (SELECT sys_cd FROM platform_code where code_cd = e.event_type)),'') || NVL(e.facility_id,''))
				LIKE ('%' || #totSearch# || '%'))
			</isNotEmpty>
	</select>
	
	<select id="eventDAO.selectEventState" parameterClass="EventSearchVO" resultClass="egovMap">
		<![CDATA[
			SELECT e.seq_no
				 , e.event_no
				 , e.state
				 , (SELECT code_nm FROM platform_code WHERE code_group = 'EVENT_STATE' AND code_cd = e.state 
				 	AND sys_cd = (SELECT sys_cd FROM platform_code where code_cd = e.event_type)) state_nm
				 , e.event_cont
				 , TO_CHAR(e.event_de, 'yyyy-mm-dd hh24:mi:ss') event_de
				 , e.accept_id
				 , e.inst_id
				 , e.inst_de
				 , e.upd_id
				 , e.upd_de
			FROM event e
			WHERE e.event_no = #eventNo#
			ORDER BY e.seq_no
			]]>
	</select>
	
	<select id="eventDAO.selectEventConfm" parameterClass="EventSearchVO" resultClass="egovMap">
		<![CDATA[
			SELECT e.seq_no
				 , e.event_no
				 , (SELECT code_nm FROM platform_code WHERE code_group = 'EVENT_TYPE' AND code_cd = e.event_type) event_title
				 , TO_CHAR(e.event_de, 'yyyy-mm-dd hh24:mi:ss') event_de
				 , e.event_rating
				 , e.event_place
				 , e.event_cont
				 , e.encrypt_latitude
				 , e.encrypt_longitude
				 , e.accept_type
				 , (SELECT code_nm FROM platform_code WHERE code_group = 'ACCEPT_TYPE' AND code_cd = e.accept_type) accept_nm
				 , e.accept_id
				 , e.info_nm
				 , e.confm_flag
			FROM event e
			WHERE e.seq_no = (SELECT max(a.seq_no) FROM event a WHERE a.event_no = e.event_no)
			AND e.state = 'EVENT_STATE_1'
			AND NVL(e.confm_flag,'N') != 'Y'
			ORDER BY e.seq_no DESC
			]]>
			
	</select>

	<insert id="eventDAO.insertEvent">
		<![CDATA[
			INSERT INTO event 
				(   seq_no
				  , event_no
				  , event_type
				  , event_de
				  , event_rating
				  , event_place
				  , event_cont
				  , state
				  , encrypt_latitude
				  , encrypt_longitude
				  , accept_type
				  , accept_id
				  , accept_cont
				  , info_nm
				  , zone
				  , facility_id
				  , inst_de
				  , inst_id
				  , upd_id )
			SELECT  event_seq.NEXTVAL
				  , #eventNo#
				  , #eventType#
				  , TO_DATE(#eventDe#, 'yyyy-mm-dd hh24:mi:ss')
				  , #eventRating#
				  , #eventPlace#
				  , #eventCont#
				  , 'EVENT_STATE_1'
				  , CRYPTO_AES128.AES_ENCRYPT(#latitude#, #key#)
				  , CRYPTO_AES128.AES_ENCRYPT(#longitude#, #key#)
				  , #acceptType#
				  , #instId#
				  , #acceptCont#
				  , #infoNm#
				  , #zone#
				  , #facilityId#
				  , CURRENT_TIMESTAMP
				  , #instId#
				  , #instId# FROM dual
			WHERE NOT EXISTS (
				SELECT seq_no FROM event 
				WHERE event_no=#eventNo#
				AND event_de=TO_DATE(#eventDe#, 'yyyy-mm-dd hh24:mi:ss'))
		]]>
	</insert>
	
	<insert id="eventDAO.insertEventEnd">
		<![CDATA[
			INSERT INTO event 
				(   seq_no
				  , event_no
				  , event_type
				  , event_de
				  , end_de
				  , event_rating
				  , event_place
				  , event_cont
				  , state
				  , encrypt_latitude
				  , encrypt_longitude
				  , accept_type
				  , accept_id
				  , accept_cont
				  , info_nm
				  , zone
				  , facility_id
				  , inst_de
				  , inst_id )
			VALUES ( event_seq.NEXTVAL
				  , #eventNo#
				  , NVL((SELECT code_cd FROM platform_code WHERE code_group = 'EVENT_TYPE' AND code_nm = #eventType#),#eventType#)
				  , TO_DATE(#eventDe#, 'yyyy-mm-dd hh24:mi:ss')
				  , TO_DATE(#endDe#, 'yyyy-mm-dd hh24:mi:ss')
				  , #eventRating#
				  , #eventPlace#
				  , #eventCont#
				  , #state#
				  , CRYPTO_AES128.AES_ENCRYPT(#latitude#, #key#)
				  , CRYPTO_AES128.AES_ENCRYPT(#longitude#, #key#)
				  , #acceptType#
				  , #instId#
				  , #acceptCont#
				  , #infoNm#
				  , #zone#
				  , #facilityId#
				  , CURRENT_TIMESTAMP
				  , #instId# )
		]]>
	</insert>
	<insert id="eventDAO.insertEventUpd">
		<![CDATA[
			MERGE INTO event
			USING DUAL
			ON (event_no = #eventNo# AND state = #state#)
			WHEN MATCHED THEN
			UPDATE SET event_type=NVL((SELECT code_cd FROM platform_code WHERE code_group = 'EVENT_TYPE' AND code_nm = #eventType#),#eventType#)
					 , event_de=TO_DATE(#eventDe#, 'yyyy-mm-dd hh24:mi:ss')
					 , event_rating=#eventRating#
					 , event_place=#eventPlace#
					 , event_cont=#eventCont#
					 , encrypt_latitude=CRYPTO_AES128.AES_ENCRYPT(#latitude#, #key#)
					 , encrypt_longitude=CRYPTO_AES128.AES_ENCRYPT(#longitude#, #key#)
					 , accept_type=#acceptType#
					 , accept_id=#instId#
					 , accept_cont=#acceptCont#
					 , info_nm=#infoNm#
					 , zone=#zone#
					 , facility_id=#facilityId#
					 , upd_de=CURRENT_TIMESTAMP
					 , upd_id=#updId#
			WHEN NOT MATCHED THEN
			INSERT ( seq_no
  		   		   , event_no
				   , event_type
				   , event_de
				   , event_rating
				   , event_place
				   , event_cont
				   , state
				   , encrypt_latitude
				   , encrypt_longitude
				   , accept_type
			 	   , accept_id
				   , accept_cont
				   , info_nm
				   , zone
				   , facility_id
				   , inst_de
				   , inst_id )
			VALUES (event_seq.NEXTVAL
				  , #eventNo#
			  	  , NVL((SELECT code_cd FROM platform_code WHERE code_group = 'EVENT_TYPE' AND code_nm = #eventType#),#eventType#)
			  	  , TO_DATE(#eventDe#, 'yyyy-mm-dd hh24:mi:ss')
			  	  , #eventRating#
			  	  , #eventPlace#
			  	  , #eventCont#
			  	  , #state#
			  	  , CRYPTO_AES128.AES_ENCRYPT(#latitude#, #key#)
			  	  , CRYPTO_AES128.AES_ENCRYPT(#longitude#, #key#)
			  	  , #acceptType#
			  	  , #instId#
			  	  , #acceptCont#
			  	  , #infoNm#
			  	  , #zone#
			  	  , #facilityId#
			  	  , CURRENT_TIMESTAMP
			  	  , #instId# )
		]]>
	</insert>
	
	<update id="eventDAO.updateEventConfm">
		<![CDATA[
			UPDATE event
			SET confm_flag='Y'
			  , upd_de=CURRENT_TIMESTAMP
			  , upd_id=#updId#
		]]>
		<isNotEmpty property = "seqNo">
			WHERE seq_no = #seqNo#
		</isNotEmpty>
	</update>
	
	<delete id="eventDAO.deleteEvent">
		<![CDATA[
			DELETE FROM notice WHERE seq_no in ]]>
		<iterate property="seqNoList" open="(" close=")" conjunction=",">
			#seqNoList[]#
		</iterate>
	</delete>
	
	<select id="eventDAO.selectEventFlagConfm" parameterClass="EventSearchVO" resultClass="egovMap">
		<![CDATA[
			SELECT e.seq_no
				 , e.event_no
				 , (SELECT code_nm FROM platform_code WHERE code_group = 'EVENT_TYPE' AND code_cd = e.event_type) event_title
				 , TO_CHAR(e.event_de, 'yyyy-mm-dd hh24:mi:ss') event_de
				 , e.event_rating
				 , e.event_place
				 , e.event_cont
				 , e.encrypt_latitude
				 , e.encrypt_longitude
				 , e.accept_type
				 , (SELECT code_nm FROM platform_code WHERE code_group = 'ACCEPT_TYPE' AND code_cd = e.accept_type) accept_nm
				 , e.accept_id
				 , e.info_nm
				 , e.confm_flag
			FROM event e
			WHERE NOT EXISTS (SELECT 1 FROM event_flag a WHERE a.event_seq_no = e.seq_no AND a.inst_id='eco')
			AND e.state = 'EVENT_STATE_1'
			AND e.event_type = 'EVENT_TYPE_6'
			AND NVL(e.confm_flag,'N') != 'Y'
			ORDER BY e.seq_no DESC
			]]>
			
	</select>	
	
	<insert id="eventDAO.insertEventFlagConfm">
		<![CDATA[
			INSERT INTO event_flag
			(idx, event_seq_no, inst_id, inst_de) VALUES 
			(event_flag_seq.NEXTVAL, #seqNo#, #instId#, CURENT_TIMESTAMP);
		]]>
	</insert>	

	<select id="eventDAO.selectEventStats" parameterClass="EventSearchVO" resultClass="egovMap">
		<![CDATA[
				select obj.*,
					   (SELECT code_nm FROM platform_code WHERE code_group = 'EVENT_TYPE' AND code_cd = obj.event_type) AS event_title
				 	   from (
					   select event_type,
        					  extract(year from event_de) AS year,
							  SUM(CASE WHEN extract(month from event_de) = 1 THEN 1 ELSE 0 END) AS m1,
							  SUM(CASE WHEN extract(month from event_de) = 2 THEN 1 ELSE 0 END) AS m2,
						   	  SUM(CASE WHEN extract(month from event_de) = 3 THEN 1 ELSE 0 END) AS m3,
							  SUM(CASE WHEN extract(month from event_de) = 4 THEN 1 ELSE 0 END) AS m4,
							  SUM(CASE WHEN extract(month from event_de) = 5 THEN 1 ELSE 0 END) AS m5,
							  SUM(CASE WHEN extract(month from event_de) = 6 THEN 1 ELSE 0 END) AS m6,
							  SUM(CASE WHEN extract(month from event_de) = 7 THEN 1 ELSE 0 END) AS m7,
							  SUM(CASE WHEN extract(month from event_de) = 8 THEN 1 ELSE 0 END) AS m8,
							  SUM(CASE WHEN extract(month from event_de) = 9 THEN 1 ELSE 0 END) AS m9,
							  SUM(CASE WHEN extract(month from event_de) = 10 THEN 1 ELSE 0 END) AS m10,
							  SUM(CASE WHEN extract(month from event_de) = 11 THEN 1 ELSE 0 END) AS m11,
							  SUM(CASE WHEN extract(month from event_de) = 12 THEN 1 ELSE 0 END) AS m12
					   from event
					   where 1=1
					   group by event_type, extract(year from event_de)
					   )obj
				WHERE 1=1   
			]]>
			<isNotEmpty property = "eventType">
			AND	event_type = #eventType#
			</isNotEmpty>
			<isNotEmpty property = "eventDe">
			AND year = #eventDe#
			</isNotEmpty>
	</select>
	
	<select id="eventDAO.selectEventEtcCont" parameterClass="String" resultClass="egovMap">
		SELECT EVT_OCR_ITEM_DTL FROM CM_EVT_OCR_ITEM WHERE EVT_OCR_NO = #value#
	</select>

</sqlMap>
